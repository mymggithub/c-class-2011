<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0060)http://fredosaurus.com/notes-cpp/newdelete/50dynamalloc.html -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><HTML 
lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD>
<META content="text/html; charset=utf-8" http-equiv="Content-Type">
<META name="author" content="Fred Swartz (www.fredosaurus.com)"><LINK rel="stylesheet" 
type="text/css" href="C++%20Notes%20Dynamic%20Allocation%20of%20Arrays_files/notes.css"><TITLE>C++ 
Notes: Dynamic Allocation of Arrays</TITLE>
<META name="GENERATOR" content="MSHTML 9.00.8112.16443"></HEAD>
<BODY>
<H1><A href="http://fredosaurus.com/notes-cpp/index.html">C++ Notes</A>: Dynamic 
Allocation of Arrays</H1>
<H2>The problems with fixed size arrays</H2>
<P>Declaring an array with a fixed size like</P><PRE class="example">int a[100000];</PRE>
<P>has two typical problems: </P>
<UL>
  <LI><B>Exceeding maximum</B>.     Choosing a real maximum is often impossible 
  because the programmer has    no control over the size of the data sets the 
  user is interested in.    Erroneous assumptions that a maximum will never be 
  exceeded are the    source of many programming bugs.    Declaring very large 
  arrays can be extremely     wasteful of memory, and if there are many such 
  arrays, may    prevent the program from running in some systems.</LI>
  <LI><B>No expansion</B>. Using a small size may be more efficient for the 
  typical data set,     but prevents the    program from running with larger 
  data sets.  If array limits are    not checked, large data sets will run over 
  the end of an array with    disastrous consequences.  Fixed size arrays can 
  not expand as needed.    </LI></UL>
<P>These problems can be avoided by dynamically allocating an array of the right 
size, or reallocating an array when it needs to expand.  Both of these are done 
by declaring an array as a  pointer and using the <CODE><B>new</B></CODE> 
operator to allocate memory, and <CODE><B>delete</B></CODE> to free memory that 
is no longer needed.</P>
<P>This is exactly what is <CODE><A href="http://fredosaurus.com/notes-cpp/stl-containers/vector/vector.html">vector</A></CODE>
does, but let's see how it's done with an array.</P>
<H2>Declare array as a pointer, allocate with <CODE>new</CODE></H2>
<P>To create a variable that will point to a dynamically allocated array, 
declare it as a pointer to the element type. For example,</P><PRE class="example">int* a = NULL;  // pointer to an int, intiallly to nothing.
</PRE>
<P>A dynamically allocated array is declared as a pointer, and must not use the 
fixed array size declaration. The above declaration creates a pointer, but 
doesn't yet allocate any memory to it.</P>
<H2>Allocate an array with code&gt;new</H2>
<P>When the desired size of an array is known, allocate memory for it with the 
<CODE><B>new</B></CODE> operator and save the address of that memory in the 
pointer.  Remember: <I>Pointers may be subscripted just as arrays are.</I>The 
example below reads in a number and allocates that size array.</P><PRE class="example"><SPAN class="hilite">int* a</SPAN> = NULL;   // Pointer to int, initialize to nothing.
int n;           // Size needed for array
cin &gt;&gt; n;        // Read in the size
<SPAN class="hilite">a = <B>new</B> int[n]</SPAN>;  // Allocate n ints and save ptr in a.
for (int i=0; i&lt;n; i++) {
    a[i] = 0;    // Initialize all elements to zero.
}
. . .  // Use a as a normal array
<SPAN class="hilite">delete [] a</SPAN>;  // When done, free memory pointed to by <I>a</I>.
a = NULL;     // Clear a to prevent using invalid memory reference.
</PRE>
<H2>Freeing memory with delete</H2>
<P>When you are finished with dynamically allocated memory, <I>free</I> it with 
the <B>delete</B> operator.  After memory is freed, it can be  reused by later 
<CODE>new</CODE> requests.  Memory that your program didn't free will be freed 
when the program terminates.  Never free memory that wasn't dynamically 
allocated - the results are unpredictable.</P><PRE class="example">delete [] a;  // Free memory allocated for the <I>a</I> array.
a = NULL;     // Be sure the deallocated memory isn't used.
</PRE>
<H3>Use <CODE>[]</CODE> when deleting arrays</H3>
<P>You must specify "<CODE>[]</CODE>" when deleting an array, but not for a 
single value.  It isn't possible to delete only part of an array.</P>
<H3>Do you have to reset a pointer after delete?</H3>
<P>Following the <CODE>delete</CODE> in these examples, I reset the pointer to 
<CODE>NULL</CODE>. This isn't strictly necessary, but it's very good practice so 
that any use of the pointer will produce an error.  Attempts to use memory 
location 0, which is the normal default value of <CODE>NULL</CODE>, will be 
blocked by the way most operating systems allocate memory.</P>
<P>Why doesn't <CODE>delete</CODE> reset the pointer?  It does in some systems,
 but the language specification does not require it, so not all systems do it.
</P>
<H2>Examples</H2>
<UL>
  <LI><A 
  href="http://fredosaurus.com/notes-cpp/newdelete/alloc-cstring.html">Allocating 
  C-Strings</A> shows a typical     example of allocating an array of a known 
  size.    </LI>
  <LI><A 
  href="http://fredosaurus.com/notes-cpp/newdelete/55dynexample.html">Expanding 
  an Array</A> shows how to     expand the size of an array dynamically.    
  </LI></UL>
<DIV class="footer">Copyleft 2004 <A href="http://www.leepoint.net/fred/">Fred 
Swartz</A> <A href="http://www.opensource.org/licenses/mit-license.php">MIT 
License</A></DIV></BODY></HTML>
